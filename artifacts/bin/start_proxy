#!/usr/bin/env ruby
user_defined_config_file_path = '/config/vhosts.yml'
template_config_file_path = '/templates/vhosts.yml'
nginx_template_file_path = '/templates/nginx.template'
ssl_certificate_base_path = '/etc/ssl/private'

require 'yaml'
require 'erb'

yaml_file = File.exists?(user_defined_config_file_path) ? user_defined_config_file_path : template_config_file_path

yaml_content = YAML.load(ERB.new(File.read(yaml_file)).result)

yaml_content['vhosts'].each do |vhost|
  server_name = vhost['server_name']
  proxied_app_url = vhost['proxied_app_url']
  ssl_cert_filename = vhost['ssl_cert_filename'] || 'cert.pem'
  ssl_cert_key_filename = vhost['ssl_cert_key_filename'] || 'key.pem'
  http_port = vhost['http_port'] || 80
  https_port = vhost['https_port'] || 443
  dh_param_filename = 'dhparam.pem'
  additional_nginx_directives = vhost['nginx_directives'].to_a.map do |key, value|
    if value.is_a? Array
      value.map { |val| "#{key} #{val};" }.join("\n")
    else
      "#{key} #{value};"
    end
  end
  headers_to_exclude = vhost['headers_to_exclude'].to_a

  abort 'ERROR: A vhost must contain a `server_name`. Please check your configuration.' if server_name.nil?
  abort "ERROR: vhost `#{server_name}` does not define a `proxied_app_url`. Please check your configuration." if proxied_app_url.nil?

  dh_parameter_file = File.join(ssl_certificate_base_path, dh_param_filename)

  unless File.exists? dh_parameter_file
    puts <<~EOF
      WARNING: A DH Parameter file does not exist. Please wait whilst we automatically generate one for you.
      Hint: Speed up start-up in the future by generating one yourself and mounting it as #{dh_parameter_file}.
    EOF

    system("openssl dhparam -out #{dh_parameter_file} 4096 2>&1")
  end

  [ssl_cert_filename, ssl_cert_key_filename].each do |file|
    absolute_path = File.join(ssl_certificate_base_path, file)
    
    abort "ERROR: #{absolute_path} does not exist. Please check your configuration." unless File.exists?(absolute_path)
  end


  # Build an NGinx config file using the NGinx template
  nginx_config_content = File.open(nginx_template_file_path, 'r').read
  nginx_config_content.gsub!('{SERVER_NAME}', server_name)
  nginx_config_content.gsub!('{PROXIED_APP_URL}', proxied_app_url)
  nginx_config_content.gsub!('{SSL_CERT_FILENAME}', ssl_cert_filename)
  nginx_config_content.gsub!('{SSL_CERT_KEY_FILENAME}', ssl_cert_key_filename)
  nginx_config_content.gsub!('{HTTP_PORT}', http_port.to_s)
  nginx_config_content.gsub!('{HTTPS_PORT}', https_port.to_s)

  headers_to_exclude.each do |header|
    nginx_config_content.gsub!(/add_header #{header} .*/i, '')
  end

  nginx_config_content.gsub!('{ADDITIONAL_NGINX_DIRECTIVES}', additional_nginx_directives.join("\n"))

  File.write("/etc/nginx/conf.d/#{server_name}.conf", nginx_config_content)
end

# Start NGinx
exec "nginx -g 'daemon off;'"